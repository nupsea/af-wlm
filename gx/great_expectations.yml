# Welcome to Great Expectations! Always know what to expect from your data.
#
# Here you can define datasources, batch kwargs generators, integrations and
# more. This file is intended to be committed to your repo. For help with
# configuration please:
#   - Read our docs: https://docs.greatexpectations.io/docs/guides/connecting_to_your_data/connect_to_data_overview/#2-configure-your-datasource
#   - Join our slack channel: http://greatexpectations.io/slack

# config_version refers to the syntactic version of this config file, and is used in maintaining backwards compatibility
# It is auto-generated and usually does not need to be changed.
config_version: 3.0

# Datasources tell Great Expectations where your data lives and how to get it.
# Read more at https://docs.greatexpectations.io/docs/guides/connecting_to_your_data/connect_to_data_overview
datasources: {}

config_variables_file_path: uncommitted/config_variables.yml

# The plugins_directory will be added to your python path for custom modules
# used to override and extend Great Expectations.
plugins_directory: plugins/

stores:
# Stores are configurable places to store things like Expectations, Validations
# Data Docs, and more. These are for advanced users only - most users can simply
# leave this section alone.
#
# Three stores are required: expectations, validations, and
# evaluation_parameters, and must exist with a valid store entry. Additional
# stores can be configured for uses such as data_docs, etc.
  expectations_store:
    class_name: ExpectationsStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      base_directory: expectations/

  validations_store:
    class_name: ValidationsStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      base_directory: uncommitted/validations/

  evaluation_parameter_store:
    class_name: EvaluationParameterStore
  checkpoint_store:
    class_name: CheckpointStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      suppress_store_backend_id: true
      base_directory: checkpoints/

  profiler_store:
    class_name: ProfilerStore
    store_backend:
      class_name: TupleFilesystemStoreBackend
      suppress_store_backend_id: true
      base_directory: profilers/

expectations_store_name: expectations_store
validations_store_name: validations_store
evaluation_parameter_store_name: evaluation_parameter_store
checkpoint_store_name: checkpoint_store

data_docs_sites:
  # Data Docs make it simple to visualize data quality in your project. These
  # include Expectations, Validations & Profiles. The are built for all
  # Datasources from JSON artifacts in the local repo including validations &
  # profiles from the uncommitted directory. Read more at https://docs.greatexpectations.io/docs/terms/data_docs
  local_site:
    class_name: SiteBuilder
    show_how_to_buttons: true
    store_backend:
      class_name: TupleFilesystemStoreBackend
      base_directory: uncommitted/data_docs/local_site/
    site_index_builder:
      class_name: DefaultSiteIndexBuilder
      validation_results_limit: 20


#  s3_site:
#    class_name: SiteBuilder
#    store_backend:
#      class_name: TupleS3StoreBackend
#      bucket: kayodatalake-dev-landing  # Replace with your S3 bucket name
#      prefix: source=datalake/name=gx/version=v1  # Replace with the desired path in your bucket
#    site_index_builder:
#      class_name: DefaultSiteIndexBuilder

anonymous_usage_statistics:
  data_context_id: dab99caf-13a3-44e0-b412-f9d3b3a30110
  enabled: true
fluent_datasources:
  s3_sourcing_binge_vimond:
    type: spark_s3
    assets:
      player_log:
        type: parquet
        batching_regex: meta_physical_partition_hh=\d{2}/
        connect_options:
          s3_prefix: ares/vimond/player_log_event/silver/v0_0.0.0_1/meta_physical_partition_valid=valid/meta_physical_partition_date=2020-08-21/
          s3_recursive_file_discovery: true
    spark_config:
      spark.hadoop.fs.s3a.acl.default: BucketOwnerFullControl
      spark.hadoop.fs.s3.impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      fs.s3a.aws.credentials.provider: com.amazonaws.auth.profile.ProfileCredentialsProvider
      spark.hadoop.hive.metastore.client.factory.class: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
      spark.sql.sources.partitionOverwriteMode: dynamic
    bucket: kayodatalake-dev-sourcing
  s3_sourcing_zuora_delta:
    type: spark_s3
    assets:
      account:
        type: parquet
        batching_regex: meta_physical_partition_date=\d{4}-\d{2}-\d{2}/meta_physical_partition_hh=\d{2}/
        connect_options:
          s3_prefix: zuora_aqua_obj_delta/account/silver/v1_0.0.8283_1/meta_physical_partition_valid=valid/
          s3_recursive_file_discovery: true
    spark_config:
      spark.hadoop.fs.s3a.acl.default: BucketOwnerFullControl
      spark.hadoop.fs.s3.impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      fs.s3a.aws.credentials.provider: com.amazonaws.auth.profile.ProfileCredentialsProvider
      spark.hadoop.hive.metastore.client.factory.class: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
      spark.sql.sources.partitionOverwriteMode: dynamic
    bucket: kayodatalake-dev-sourcing
  my_awsathena_datasource:
    type: sql
    assets:
      zuora_aqua_obj_delta_account_v1:
        type: table
        order_by: []
        batch_metadata: {}
        table_name: zuora_aqua_obj_delta_account_v1
        schema_name:
    connection_string: awsathena+rest://@athena.ap-southeast-2.amazonaws.com:443/kayo_temp?s3_staging_dir=s3://aws-athena-query-results-294530054210-dev/
  athena_sourcing:
    type: sql
    assets:
      ares_vimond_player_log:
        type: table
        order_by: []
        batch_metadata: {}
        table_name: ares_vimond_player_log
        schema_name:
    connection_string: awsathena+rest://@athena.ap-southeast-2.amazonaws.com:443/kayo_temp?s3_staging_dir=s3://aws-athena-query-results-294530054210-dev/
notebooks:
include_rendered_content:
  globally: false
  expectation_suite: false
  expectation_validation_result: false
